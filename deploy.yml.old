- name: Deploy DNS
  hosts: all
  vars_files:
    - group_vars/all.yml
  vars:
    host_template:
      oxygen1: "db-sg.conf.j2"
      ny5-dtlsys01: "db-us.conf.j2"
      shd-dtlsys02: "db-cn.conf.j2"
    reverse_template:
      oxygen1: "db-sg-reverse.conf.j2"
      ny5-dtlsys01: "db-us-reverse.conf.j2"
      shd-dtlsys02: "db-cn-reverse.conf.j2"
    dbs: "{{ hostvars[inventory_hostname][region].dbs }}"

    #reverse_zone_prefix: "{{ dbs[0].ip.split('.')[0:3] | join('.') }}"

  tasks:
    - name: Set region based on current host
      set_fact:
        region: "{{ item }}"
      when: "inventory_hostname in groups[item] or item == 'sg_cn' and inventory_hostname in groups['sg'] + groups['cn']"
      with_items: "{{ groups.keys() }}"
    - name: Check for duplicate IPs in A records
      block:
        - name: Collect all A record IPs and domain names
          set_fact:
            all_a_records: "{{ dbs | selectattr('type', 'equalto', 'A') }}"
            #all_a_records: "{{ hostvars[inventory_hostname][region].dbs | selectattr('type', 'equalto', 'A') }}"

        - name: Check for duplicate IPs and report domain names
          vars:
            duplicate_record: "{{ all_a_records | selectattr('ip', 'equalto', item.ip) | list }}"
          assert:
            that:
              - duplicate_record | length == 1
            fail_msg: "Found duplicate IP {{ item.ip }} of domain {{ item.domain_name }}. Please use CNAME instead."
          loop: "{{ all_a_records }}"
          loop_control:
            label: "{{ item.domain_name }}"
          tags: check_duplicate_ips
    - name: Set reverse_zone_prefix dynamically
      set_fact:
        reverse_zone_prefix: "{{ dbs | selectattr('type', 'equalto', 'A') | map(attribute='ip') | select('match', '^[0-9]{1,3}(\\.[0-9]{1,3}){3}$') | map('regex_replace', '\\.(\\d+)$', '') | unique | list }}"  #only IP and type A can be generated to grouping in reverse files

    - name: Install basic env and start DNS service
      block:
        - name: Create directory
          file:
            path: "/var/local/dns"
            state: directory
            mode: "0755"

        - name: Copy update_config.sh
          vars:
            home: "/var/local/dns"
          template:
            src: update_config.sh.j2
            dest: "/var/local/dns/update_config.sh"
            mode: "0755"

        - name: Generate db.conf
          template:
            src: "{{ host_template[inventory_hostname] }}"
            dest: "/var/local/dns/db.conf"
            mode: "0755"
          vars:
            dbs: "{{ hostvars[inventory_hostname][region].dbs }}"
        - name: Generate reverse zone file
          template:
            src: "{{ reverse_template[inventory_hostname] }}"
            dest: "/var/local/dns/db-{{ item }}-reverse.conf"
            mode: "0755"
          vars:
            dbs: "{{ hostvars[inventory_hostname][region].dbs }}"
            reverse_zone_prefix: "{{ item }}"
          with_items: "{{ reverse_zone_prefix }}"
      tags: install

    - name: Update configuration
      ansible.builtin.shell: "cd /var/local/dns && ./update_config.sh \"{{ ansible_distribution }}\" '{{ reverse_zone_prefix | join(' ') }}'"
      tags: update
