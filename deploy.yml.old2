- name: Deploy DNS
  hosts: all
  vars_files:
    - group_vars/all.yml
  vars:
    host_template:
      eye-jagoinfra: "db-ji.conf.j2"
    reverse_template:
      eye-jagoinfra: "db-ji-reverse.conf.j2"
    dbs: "{{ hostvars[inventory_hostname][region].dbs }}"
    #reverse_zone_prefix: "{{ dbs[0].ip.split('.')[0:3] | join('.') }}"

  tasks:
    - name: Check if the local repository is up to date
      local_action:
        module: command
        cmd: git status
      register: git_status
      ignore_errors: yes
    - name: Validate repository status
      debug:
        msg: "Repository is up to date, you can proceed."
      when: "'tree clean' in git_status.stdout_lines"

    - name: Show error message if changes are not pushed
      debug:
        msg: "You must push your changes first."
      when: "'tree clean' not in git_status.stdout_lines"
    - name: Set region based on current host
      set_fact:
        region: "{{ item }}"
          #when: "inventory_hostname in groups[item] or item == 'ji_cn' and inventory_hostname in groups['ji'] + groups['cn']"
      when: "inventory_hostname in groups[item] or item == 'ji'"
      with_items: "{{ groups.keys() }}"

    - name: Check for duplicate IPs in A records
      block:
        - name: Collect all A record IPs and domain names
          set_fact:
            all_a_records: "{{ dbs | selectattr('type', 'equalto', 'A') }}"
            #all_a_records: "{{ hostvars[inventory_hostname][region].dbs | selectattr('type', 'equalto', 'A') }}"

        - name: Check for duplicate IPs and report domain names
          vars:
            duplicate_record: "{{ all_a_records | selectattr('ip', 'equalto', item.ip) | list }}"
          assert:
            that:
              - duplicate_record | length == 1
            fail_msg: "Found duplicate IP {{ item.ip }} of domain {{ item.domain_name }}. Please use CNAME instead."
          loop: "{{ all_a_records }}"
          loop_control:
            label: "{{ item.domain_name }}"
          tags: check_duplicate_ips

    - name: Install basic env and start DNS service
      block:
        - name: Create directory
          file:
            path: "/var/local/dns"
            state: directory
            mode: "0755"

        - name: Copy update_config.sh
          vars:
            home: "/var/local/dns"
          template:
            src: update_config.sh.j2
            dest: "/var/local/dns/update_config.sh"
            mode: "0755"

        - name: Generate db.conf
          template:
            src: "{{ host_template[inventory_hostname] }}"
            dest: "/var/local/dns/db.conf"
            mode: "0755"
          vars:
            dbs: "{{ hostvars[inventory_hostname][region].dbs }}"
      tags: install

    - name: Update configuration
      ansible.builtin.shell: "cd /var/local/dns && ./update_config.sh \"{{ ansible_distribution }}\""
      tags: update
